//
//  APIError.swift
//  UniversalMultimediaApplication1
//
//  Created by –ù–∏–∫–æ–ª–∞–π –ì—Ä–∏–Ω—å–∫–æ on 27.02.2025.
//

import UIKit


enum APIError: Error {
    case noInternet
    case unauthorized
    case requestFailed(statusCode: Int)
    case unknown
}

final class OpenAIService {
    
    func sendMessage(apiKey: String, message: String, completion: @escaping (Result<String, APIError>) -> Void) {
        guard let url = URL(string: "https://api.openai.com/v1/chat/completions") else {
            completion(.failure(.unknown))
            return
        }
        
        let requestBody: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": [["role": "user", "content": message]]
        ]
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                completion(.failure(.noInternet))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω HTTP-–æ—Ç–≤–µ—Ç")
                completion(.failure(.unknown))
                return
            }
            
            print("üîÑ –°—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: \(httpResponse.statusCode)")
            
            switch httpResponse.statusCode {
            case 200:
                if let data = data,
                   let json = try? JSONSerialization.jsonObject(with: data, options: []),
                   let dict = json as? [String: Any] {
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: \(dict)")
                    let responseText = ((dict["choices"] as? [[String: Any]])?.first?["message"] as? [String: Any])?["content"] as? String ?? "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
                    completion(.success(responseText))
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                    completion(.failure(.unknown))
                }
            case 401:
                print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á")
                completion(.failure(.unauthorized))
            default:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP \(httpResponse.statusCode): \(HTTPURLResponse.localizedString(forStatusCode: httpResponse.statusCode))")
                completion(.failure(.requestFailed(statusCode: httpResponse.statusCode)))
            }
        }
        print("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
        print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API-–∫–ª—é—á: \(apiKey)")
        print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI API")
        task.resume()
    }
}
