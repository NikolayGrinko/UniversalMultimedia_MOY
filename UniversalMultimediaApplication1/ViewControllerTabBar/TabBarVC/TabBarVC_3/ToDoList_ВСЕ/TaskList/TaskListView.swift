//
//  TaskListViewProtocol.swift
//  UniversalMultimedia_MOY
//
//  Created by –ù–∏–∫–æ–ª–∞–π –ì—Ä–∏–Ω—å–∫–æ on 31.01.2025.

import UIKit

protocol TaskListViewProtocol: AnyObject {
    func showTasks(_ tasks: [TaskEntity])
}

class TaskListView: UIViewController, TaskListViewProtocol {
    
    private var tasks: [TaskEntity] = []        // ‚úÖ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    private var filteredTasks: [TaskEntity] = [] // ‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    private var isSearching = false             // ‚úÖ –§–ª–∞–≥ –ø–æ–∏—Å–∫–∞
    private let tableView = UITableView()
    private let searchController = UISearchController(searchResultsController: nil)
    private let addButton = UIButton() // ‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    
    var presenter: TaskListPresenterProtocol?
    
    private let taskCountLabel: UILabel = { // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º label –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        let label = UILabel()
        label.font = .systemFont(ofSize: 20, weight: .medium)
        label.textAlignment = .center
        label.textColor = .systemBlue
        label.text = "–ó–∞–¥–∞—á: 0"
        return label
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.register(TaskCell.self, forCellReuseIdentifier: TaskCell.identifier)
        tableView.rowHeight = UITableView.automaticDimension // ‚úÖ –ê–≤—Ç–æ-–≤—ã—Å–æ—Ç–∞
        tableView.backgroundColor = #colorLiteral(red: 0.6240465045, green: 0.09995300323, blue: 0.4080937505, alpha: 1)
        setupUI()
        setupLongPressGesture() // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        print("‚úÖ TaskListView –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º fetchTasks()")
        setupSearchController()
        setupTaskCountLabel()
        presenter?.loadTasks()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("üì° TaskListView: –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞") // ‚úÖ –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
        presenter?.loadTasks() // üî• –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    }
    
    private func setupLongPressGesture() {
        let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(_:)))
        tableView.addGestureRecognizer(longPressGesture)
    }
    
    @objc private func handleLongPress(_ gestureRecognizer: UILongPressGestureRecognizer) {
        let point = gestureRecognizer.location(in: tableView)
        guard let indexPath = tableView.indexPathForRow(at: point) else { return }
        
        if gestureRecognizer.state == .began {
            let task = isSearching ? filteredTasks[indexPath.row] : tasks[indexPath.row]
            showTaskOptions(for: task)
        }
    }
    
    private func showTaskOptions(for task: TaskEntity) {
        let alert = UIAlertController(title: "–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π", message: nil, preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", style: .default, handler: { _ in
            self.openEditTaskScreen(task)
        }))
        
        alert.addAction(UIAlertAction(title: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", style: .default, handler: { _ in
            self.shareTask(task)
        }))
        
        alert.addAction(UIAlertAction(title: "–£–¥–∞–ª–∏—Ç—å", style: .destructive, handler: { _ in
            self.presenter?.deleteTask(task)
        }))
        
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel))
        
        present(alert, animated: true)
    }
    
    func setupSearchController() {
        searchController.editButtonItem.style = .done
        searchController.searchBar.backgroundColor = #colorLiteral(red: 0.5568627715, green: 0.3529411852, blue: 0.9686274529, alpha: 1)
        searchController.searchBar.tintColor = #colorLiteral(red: 0.1267546319, green: 0.9686274529, blue: 0.06339141484, alpha: 1)
        searchController.searchBar.searchBarStyle = .minimal
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = "–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."
        navigationItem.searchController = searchController
        definesPresentationContext = true
    }
    
    func setupUI() {
        view.backgroundColor = #colorLiteral(red: 0.6369494796, green: 0.09633842856, blue: 0.4035278857, alpha: 1)
        title = "To-Do List"
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Edit", style: .plain, target: self, action: #selector(toggleEditingMode)) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Edit
        
        tableView.frame = CGRect(x: 0, y: 70, width: view.frame.size.width, height: view.frame.size.height - 180)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        view.addSubview(tableView)
        
        setupAddButton() // ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    }
    
    func setupAddButton() {
        addButton.setImage(UIImage(systemName: "square.and.pencil"), for: .normal)
        addButton.imageView?.contentMode = .scaleAspectFill
        addButton.layer.cornerRadius = 25
        addButton.clipsToBounds = true
        addButton.addTarget(self, action: #selector(addTaskTapped), for: .touchUpInside)
        
        addButton.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(addButton)
        
        NSLayoutConstraint.activate([
            addButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            addButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10),
            addButton.widthAnchor.constraint(equalToConstant: 60),
            addButton.heightAnchor.constraint(equalToConstant: 60)
        ])
    }
    
    private func setupTaskCountLabel() {
        taskCountLabel.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(taskCountLabel)
        
        NSLayoutConstraint.activate([
            taskCountLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            taskCountLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            taskCountLabel.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -30),
            taskCountLabel.heightAnchor.constraint(equalToConstant: 20)
        ])
    }
    
    @objc func addTaskTapped() {
        let addTaskVC = AddTaskRouter.createModule()
        navigationController?.pushViewController(addTaskVC, animated: true) // ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    }
    
    
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @objc func toggleEditingMode() {
        tableView.setEditing(!tableView.isEditing, animated: true)
        navigationItem.rightBarButtonItem?.title = tableView.isEditing ? "Done" : "Edit"
    }
    
    func showTasks(_ tasks: [TaskEntity]) {
        self.tasks = tasks
        self.filteredTasks = tasks // ‚úÖ –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞
        updateTaskCount()
        print("‚úÖ TaskListView: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å \(tasks.count) –∑–∞–¥–∞—á–∞–º–∏")
        tableView.reloadData()
    }
    
    private func updateTaskCount() { // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        let taskCount = isSearching ? filteredTasks.count : tasks.count
        taskCountLabel.text = "–ó–∞–¥–∞—á: \(taskCount)"
    }
    
    
    private func openEditTaskScreen(_ task: TaskEntity) {
        let editVC = AddTaskRouter.createModule(editingTask: task) // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–¥–∞—á—É
        let navController = UINavigationController(rootViewController: editVC)
        present(navController, animated: true)
    }
    
    private func shareTask(_ task: TaskEntity) {
        let taskInfo = "üë§ User \(task.userId)\nüìå \(task.todo)\nüìÖ \(formatDate(task.createdAt))"
        let activityVC = UIActivityViewController(activityItems: [taskInfo], applicationActivities: nil)
        present(activityVC, animated: true)
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy HH:mm"
        return formatter.string(from: date)
    }
    
}

extension TaskListView: TaskCellDelegate {
    func didToggleCompletion(for task: TaskEntity) {
        presenter?.updateTask(task) // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤ CoreData
    }
}

extension TaskListView: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: \(tasks.count)")
        return isSearching ? filteredTasks.count : tasks.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let task = isSearching ? filteredTasks[indexPath.row] : tasks[indexPath.row]
        
        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º debug print
        print("üìå –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —è—á–µ–π–∫—É: \(task.todo), UserID: \(task.userId), –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \(task.completed)")
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: TaskCell.identifier, for: indexPath) as? TaskCell else {
            return UITableViewCell()
        }
        cell.configure(with: task, delegate: self) // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –¥–µ–ª–µ–≥–∞—Ç
        return cell
    }
}

// ‚úÖ –î–µ–ª–∞–µ–º UITableViewDelegate, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–≤–∞–π–ø—ã –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
extension TaskListView: UITableViewDelegate {
    
    // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–≤–∞–π–ø–æ–º –≤–ª–µ–≤–æ
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let deleteAction = UIContextualAction(style: .destructive, title: "–£–¥–∞–ª–∏—Ç—å") { [weak self] _, _, completionHandler in
            guard let self = self else { return }
            let task = self.tasks[indexPath.row]
            self.presenter?.deleteTask(task) // üî• –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä
            self.tasks.remove(at: indexPath.row) // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            tableView.deleteRows(at: [indexPath], with: .fade)
            completionHandler(true)
        }
        return UISwipeActionsConfiguration(actions: [deleteAction])
    }
    
    // ‚úÖ –í—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        var task = isSearching ? filteredTasks[indexPath.row] : tasks[indexPath.row]
        
        task.completed.toggle() // üî• –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        
        tasks[indexPath.row] = task // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
        presenter?.updateTask(task) // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –≤ CoreData
        
        tableView.reloadRows(at: [indexPath], with: .automatic) // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º UI
        let detailVC = TaskDetailViewController()
        detailVC.task = task
        navigationController?.pushViewController(detailVC, animated: true)
    }
}

// ‚úÖ UISearchResultsUpdating
extension TaskListView: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        guard let searchText = searchController.searchBar.text?.lowercased() else { return }
        
        if searchText.isEmpty {
            isSearching = false
            filteredTasks = tasks
        } else {
            isSearching = true
            filteredTasks = tasks.filter { $0.todo.lowercased().contains(searchText) }
        }
        
        updateTaskCount()
        tableView.reloadData()
    }
}
